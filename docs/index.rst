.. pyterranetes documentation master file, created by
   sphinx-quickstart on Tue Dec 11 22:45:21 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

pyterranetes
============

.. toctree::
   :maxdepth: 3
   :caption: Contents:

pyterranetes is a tool for reducing duplication in kubernetes and
terraform configurations.

pyterranetes is not a templating language, python code is run which
generates objects, these objects are then serialized to the proper
format (yaml for kubernetes/helm and json for terraform)

pyterranetes can be used as much, or as little, as needed. It
integrates cleanly into existing terraform and k8s and helm setups and
can be used only in those places where it's most useful.

Quickstart
==========

Create a file called ``main.p10s`` with this content:

.. code-block:: python

   from p10s import tf

   c = tf.Context()

   c += tf.Resource(type="aws_security_group", name="default", body=dict(
       name="terraform_example",
       description="Used in the terraform",
       vpc_id="${aws_vpc.default.id}"
   ))

Run:

.. code-block:: bash

   $ p10s g

And you'll have a ``main.tf.json`` file whose contents are (using hcl
syntax here, but json is what's actually generated by pyterranetes):

.. code-block:: terraform

   resource "aws_security_group" "default" {
       name        = "terraform_example"
       description = "Used in the terraform"
       vpc_id      = "${aws_vpc.default.id}"
   }

Overview
========

Every pyterranetes script is python code, so it needs to first import
pyterranetes itself:

.. code-block:: python

   from p10s import tf

When this file is run by the ``p10s`` command line it will look for a
``Context`` objects defined in the module's globals and generate its
output from that, so we'll need to define a top level context object:

.. code-block:: python

   c = tf.Context()

However a context object by itself doesn't have any data, we'll need
to add some terraform objects to our context:

.. code-block:: python

   c += tf.Resource(type="aws_security_group", name="default", body=dict(
       name        = "terraform_example",
       description = "Used in the terraform",
       vpc_id      = "${aws_vpc.default.id}"
   ))

If this was all we're doing there wouldn't be much point in adding
python. But what if we want to add a list of ingresses to this code?
What if we wanted something like this:

.. code-block:: terraform

   resource "aws_security_group" "default" {
      ingress {
        from_port = 22
        to_port   = 22
        cidr_blocks = ["0.0.0.0/0"]
      }
      ingress {
        from_port = 443
        to_port   = 443
        cidr_blocks = ["0.0.0.0/0"]
      }
      ingress {
        from_port = 8080
        to_port   = 8080
        cidr_blocks = ["0.0.0.0/0"]
      }
   }


We'd like to avoid having to repeat the cidr_blocks and the port
numbers each time. We can fairly easily convert this to DRY python:
   
.. code-block:: python

   from p10s import tf

   c = tf.Context()

   def ingress(port, protocol):
       return dict(
           from_port   = port,
           to_port     = port,
           protocol    = protocol,
           cidr_blocks = ['0.0.0.0/0']
       }

   c += tf.Resource(type="aws_security_group", name="default", body=dict(
       name        = "terraform_example",
       description = "Used in the terraform",
       vpc_id      = "${aws_vpc.default.id}",
       ingress = [
           ingress(port=22, protocol='tcp'),
           ingress(port=80, protocol='tcp'),
           ingress(port=0,  protocol='-1')
       ]
   ))

Terraform
=========

Reference
---------

Terraform Context
^^^^^^^^^^^^^^^^^

.. autoclass:: p10s.terraform.Context
   :members:

Terraform Objects
^^^^^^^^^^^^^^^^^

.. autofunction:: p10s.terraform.from_hcl
.. autoclass:: p10s.terraform.Terraform
.. autoclass:: p10s.terraform.Variable
.. autoclass:: p10s.terraform.Output
.. autoclass:: p10s.terraform.Locals
.. autoclass:: p10s.terraform.Module
.. autoclass:: p10s.terraform.Provider
.. autoclass:: p10s.terraform.Resource
.. autoclass:: p10s.terraform.Data

Terraform Helpers
^^^^^^^^^^^^^^^^^

.. autofunction:: p10s.terraform.from_hcl
.. autofunction:: p10s.terraform.many_from_hcl
                  
Kubernetes
==========

Reference
---------

Kubernetes Context
^^^^^^^^^^^^^^^^^^

.. autoclass:: p10s.kubernetes.Context
   :members:

Kubernetes Objects
^^^^^^^^^^^^^^^^^^

.. autoclass:: p10s.kubernetes.Deployment
.. autoclass:: p10s.kubernetes.ConfigMap
.. autoclass:: p10s.kubernetes.Service
.. autofunction:: p10s.kubernetes.from_yaml
.. autofunction:: p10s.kubernetes.many_from_yaml

Kubernetes Helpers
^^^^^^^^^^^^^^^^^^
.. autofunction:: p10s.kubernetes.from_yaml
.. autofunction:: p10s.kubernetes.many_from_yaml
      
Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
