Tutorial
========

Create a file called ``main.p10s`` with this content:

.. code-block:: python

   from p10s import tf

   c = tf.Context()

   c += tf.Resource("aws_security_group", "default", dict(
           name="terraform_example",
           description="Used in the terraform",
           vpc_id="${aws_vpc.default.id}"
   ))

Run:

.. code-block:: bash

   $ p10s g

And you'll have a ``main.tf.json`` file whose contents are (using hcl
syntax here, but json is what's actually generated by pyterranetes):

.. code-block:: terraform

   resource "aws_security_group" "default" {
       name        = "terraform_example"
       description = "Used in the terraform"
       vpc_id      = "${aws_vpc.default.id}"
   }

If all we wanted to do was write terraform with python syntax we
wouldn't be gaining much. To make things more interesting, let's
assume we wanted to define a block of ingess values for this resource
each one of which has the same from and to port. Frist we create a
simple python function to generate the data we want:

.. code-block:: python

    def ingress(port, protocol='tcp'):
       return dict(
           from_port   = port,
           to_port     = port,
           protocol    = protocol,
           cidr_blocks = ['0.0.0.0/0']
       }

and then we can use this in the resource block above:

.. code-block:: python

   c += tf.Resource("aws_security_group", "default", dict(
       name        = "terraform_example",
       description = "Used in the terraform",
       vpc_id      = "${aws_vpc.default.id}",
       ingress     = [
           ingress(port=22),
           ingress(port=80),
           ingress(port=0,  protocol='-1')
       ]
   ))

If we see that we're using the same code over and over again we need a
way to share this code across our various scripts. Since p10s scripts
are just python we can of course put our common code in a module and
``pip install`` it, but this is often too much effort for what we want
to do.

To alleviate this pyterranetes will look for a directory named
``pyterranetes`` in the file system hierarchy above the script and
automatically add it to ``PYTHONPATH``. So if we had this content in a
file named ``project/ptyerranetes/infra.py``:

.. code-block:: python

    from p10s import k8s, values

    VALUES = values.use_values(values.Values.from_file("."))

    def deployment(*args, **kwargs):
        d = k8s.Deployment(*args, **kwargs)
        d.body['labels']['env'] = VALUES['env']
        return d

we would then use it in all our scripts like this:

.. code-block:: python

    from p10s import k8s, yaml
    import infra

    c = k8s.Context()
    c += infra.deployment(data=yaml("""
       apiVersion: v1
       etc.
    """))
        
